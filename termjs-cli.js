// Generated by CoffeeScript 1.8.0
var TermJSCli, readline, socketio, tty,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

socketio = require('socket.io-client');

readline = require('readline');

tty = require('tty');

TermJSCli = (function() {
  function TermJSCli(opts, cb) {
    this.opts = opts;
    if (cb == null) {
      cb = null;
    }
    this.send = __bind(this.send, this);
    this.setupReceiver = __bind(this.setupReceiver, this);
    this.connect = __bind(this.connect, this);
    this.socket = null;
    this.pty = null;
    this.stats = {
      received: 0,
      sent: 0
    };
    process.nextTick(function() {
      if (cb) {
        return cb(this);
      }
    });
    return this;
  }

  TermJSCli.prototype.connect = function(cb) {
    if (cb == null) {
      cb = null;
    }
    this.socket = socketio.connect(this.opts.url);
    this.pty = null;
    this.stdin = process.stdin;
    this.stdin.setRawMode(true);
    this.stdin.resume();
    this.stdin.setEncoding('utf8');
    this.stdin.on('data', (function(_this) {
      return function(key) {
        if (key.toString() === String.fromCharCode(0x11)) {
          _this.stdin.pause();
          _this.socket.disconnect();
          return process.exit();
        } else {
          return _this.socket.emit('data', _this.pty, key);
        }
      };
    })(this));
    return this.socket.on('connect', (function(_this) {
      return function() {
        return _this.socket.emit('create', 80, 25, function(err, data) {
          _this.pty = data.id;
          if (_this.opts.sendNewLineOnConnect) {
            _this.send('\n');
          }
          return _this.setupReceiver(cb);
        });
      };
    })(this));
  };

  TermJSCli.prototype.setupReceiver = function(cb) {
    if (cb == null) {
      cb = null;
    }
    if (cb != null) {
      cb(null, this);
    }
    return this.socket.on('data', (function(_this) {
      return function(pty, data) {
        _this.pty = pty;
        _this.stats.received += 1;
        if (_this.stats.received === 1 && _this.opts.sendNewLineOnConnect && data === '\r\n') {
          return;
        }
        return process.stdout.write(data);
      };
    })(this));
  };

  TermJSCli.prototype.send = function(line) {
    return this.socket.emit('data', this.pty, line);
  };

  return TermJSCli;

})();

module.exports = TermJSCli;
